apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: "com.google.protobuf"

dependencies {
    api project(':commons-java')

    implementation rootProject.ext.kotlinLibs.values()
    implementation rootProject.ext.kotlinAndroidLibs.values()
    implementation rootProject.ext.supportLibs.core
    implementation rootProject.ext.gpsLibs.basement // update security provider for SSL
    implementation rootProject.ext.googlePlayLibs.appUpdate
    implementation rootProject.ext.protobufLibs.javalite
    implementation libs.bundles.retrofitLibs
    implementation libs.bundles.okHttpLibs
    implementation libs.bundles.gsonLibs

    testImplementation libs.bundles.JUnitLibs
    testImplementation libs.bundles.mockitoLibs
}

protobuf {
    protoc {
        artifact = rootProject.ext.protobufLibs.compiler
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    compileOptions {
        sourceCompatibility rootProject.javaVersion
        targetCompatibility rootProject.javaVersion
    }
    kotlinOptions {
        jvmTarget = rootProject.ext.kotlinOptionsJvmTarget
    }

    namespace 'org.mtransit.android.commons'

    defaultConfig {
        consumerProguardFiles 'proguard-rules.pro'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        manifestPlaceholders = [
                permission_provider_read     : "org.mtransit.android.provider.permission.READ_PROVIDER",
                permission_receiver_broadcast: "org.mtransit.android.receiver.permission.BROADCAST_RECEIVER",
                target_sdk_version           : "$rootProject.ext.targetSdkVersion",
                pkg_namespace                : namespace,
        ]
    }

    buildTypes {
        debug {
            manifestPlaceholders = [
                    permission_provider_read     : "org.mtransit.android.debug.provider.permission.READ_PROVIDER",
                    permission_receiver_broadcast: "org.mtransit.android.debug.receiver.permission.BROADCAST_RECEIVER",
            ]
        }
    }

    lint {
        abortOnError true
        // abortOnError false // DEBUG
        ignoreWarnings false
        // ignoreWarnings true // DEBUG
        quiet false
        // quiet  true // DEBUG
        warning 'InvalidPackage'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                jvmArgs '-noverify'
                testLogging {
                    events 'passed', 'skipped', 'failed'
                }
            }
        }
    }
}
