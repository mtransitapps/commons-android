plugins {
    alias libs.plugins.android.library
    alias libs.plugins.kotlin.android
    alias libs.plugins.protobuf
}

android {
    compileSdkVersion libs.versions.compileSdkVersion.get().toInteger()
    buildToolsVersion libs.versions.buildToolsVersion.get()

    compileOptions {
        sourceCompatibility rootProject.javaVersion
        targetCompatibility rootProject.javaVersion
    }
    kotlinOptions {
        jvmTarget = libs.versions.kotlinOptionsJvmTarget.get()
        allWarningsAsErrors = true
    }

    namespace 'org.mtransit.android.commons'

    defaultConfig {
        consumerProguardFiles 'proguard-rules.pro'
        minSdkVersion libs.versions.minSdkVersion.get().toInteger()
        targetSdkVersion libs.versions.targetSdkVersion.get().toInteger()

        manifestPlaceholders = [
                permission_provider_read     : "org.mtransit.android.provider.permission.READ_PROVIDER",
                permission_receiver_broadcast: "org.mtransit.android.receiver.permission.BROADCAST_RECEIVER",
                target_sdk_version           : libs.versions.targetSdkVersion.get(),
                pkg_namespace                : namespace,
        ]
    }

    buildFeatures {
        buildConfig true
    }

    buildTypes {
        debug {
            manifestPlaceholders = [
                    permission_provider_read     : "org.mtransit.android.debug.provider.permission.READ_PROVIDER",
                    permission_receiver_broadcast: "org.mtransit.android.debug.receiver.permission.BROADCAST_RECEIVER",
            ]
        }
    }

    lint {
        abortOnError true
        // abortOnError false // DEBUG
        ignoreWarnings false
        // ignoreWarnings true // DEBUG
        quiet false
        // quiet  true // DEBUG
        warning 'InvalidPackage'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                jvmArgs '-noverify'
                testLogging {
                    events 'passed', 'skipped', 'failed'
                }
            }
        }
    }
}

dependencies {
    api project(':commons-java')

    implementation libs.bundles.kotlin
    implementation libs.bundles.kotlin.android
    implementation libs.androidx.core
    implementation libs.bundles.workManager
    implementation libs.gps.basement // update security provider for SSL
    implementation libs.play.appUpdate
    implementation libs.protobuf.javaLite
    implementation libs.bundles.retrofit
    implementation platform(libs.okhttp.bom)
    implementation libs.bundles.okHttp
    implementation libs.bundles.gson

    testImplementation libs.bundles.JUnit
    testImplementation libs.bundles.mockito
}

protobuf {
    protoc {
        artifact = libs.protobuf.compiler.get()
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}
