plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'com.google.protobuf'
}

android {
    compileSdkVersion libs.versions.compileSdkVersion.get().toInteger()
    buildToolsVersion libs.versions.buildToolsVersion.get()

    compileOptions {
        sourceCompatibility rootProject.javaVersion
        targetCompatibility rootProject.javaVersion
    }
    kotlinOptions {
        jvmTarget = libs.versions.kotlinOptionsJvmTarget.get()
    }

    namespace 'org.mtransit.android.commons'

    defaultConfig {
        consumerProguardFiles 'proguard-rules.pro'
        minSdkVersion libs.versions.minSdkVersion.get().toInteger()
        targetSdkVersion libs.versions.targetSdkVersion.get().toInteger()

        manifestPlaceholders = [
                permission_provider_read     : "org.mtransit.android.provider.permission.READ_PROVIDER",
                permission_receiver_broadcast: "org.mtransit.android.receiver.permission.BROADCAST_RECEIVER",
                target_sdk_version           : libs.versions.targetSdkVersion.get(),
                pkg_namespace                : namespace,
        ]
    }

    buildTypes {
        debug {
            manifestPlaceholders = [
                    permission_provider_read     : "org.mtransit.android.debug.provider.permission.READ_PROVIDER",
                    permission_receiver_broadcast: "org.mtransit.android.debug.receiver.permission.BROADCAST_RECEIVER",
            ]
        }
    }

    lint {
        abortOnError true
        // abortOnError false // DEBUG
        ignoreWarnings false
        // ignoreWarnings true // DEBUG
        quiet false
        // quiet  true // DEBUG
        warning 'InvalidPackage'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                jvmArgs '-noverify'
                testLogging {
                    events 'passed', 'skipped', 'failed'
                }
            }
        }
    }
}

dependencies {
    api project(':commons-java')

    implementation libs.bundles.kotlinLibs
    implementation libs.bundles.kotlinAndroidLibs
    implementation libs.core
    implementation libs.bundles.workManagerLibs
    implementation libs.gpsBasement // update security provider for SSL
    implementation libs.playAppUpdate
    implementation libs.protobufJavaLite
    implementation libs.bundles.retrofitLibs
    implementation platform(libs.okhttpBom)
    implementation libs.bundles.okHttpLibs
    implementation libs.bundles.gsonLibs

    testImplementation libs.bundles.JUnitLibs
    testImplementation libs.bundles.mockitoLibs
}

protobuf {
    protoc {
        artifact = libs.protobufCompiler.get()
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}
