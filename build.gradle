plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.gradle.androidCacheFix)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlinx.serialization)
    alias(libs.plugins.protobuf)
}

java.toolchain.languageVersion = JavaLanguageVersion.of(rootProject.javaToolchainVersion.toString())

def envCI = System.getenv("CI")
def isCI = envCI != null && envCI != ""

android {
    compileSdk = libs.versions.sdk.compile.get().toInteger()
    buildToolsVersion = libs.versions.buildTools.get()

    compileOptions {
        coreLibraryDesugaringEnabled = true // required for Google Play Services https://developers.google.com/android/guides/releases#april_14_2025
        sourceCompatibility = rootProject.javaVersion
        targetCompatibility = rootProject.javaVersion
    }
    kotlinOptions {
        jvmTarget = rootProject.javaVersion
        // allWarningsAsErrors = true // replaced by "DeprecatedCall" in lint
    }

    namespace = "org.mtransit.android.commons"

    defaultConfig {
        consumerProguardFiles("proguard-rules.pro")
        minSdk = libs.versions.sdk.min.get().toInteger()
        targetSdk = libs.versions.sdk.target.get().toInteger()

        manifestPlaceholders.permission_provider_read = "org.mtransit.android.provider.permission.READ_PROVIDER"
        manifestPlaceholders.permission_receiver_broadcast = "org.mtransit.android.receiver.permission.BROADCAST_RECEIVER"
        manifestPlaceholders.target_sdk_version = libs.versions.sdk.target.get()
        manifestPlaceholders.pkg_namespace = namespace
    }

    buildFeatures {
        buildConfig = true
    }

    buildTypes {
        debug {
            manifestPlaceholders.permission_provider_read = "org.mtransit.android.debug.provider.permission.READ_PROVIDER"
            manifestPlaceholders.permission_receiver_broadcast = "org.mtransit.android.debug.receiver.permission.BROADCAST_RECEIVER"
        }
    }

    sourceSets {
        main {
            res.srcDirs += "src/main/res-cert"
            res.srcDirs += "src/main/res-current"
            res.srcDirs += "src/main/res-next"
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            tasks.withType(Test).configureEach {
                jvmArgs "-noverify"
                testLogging {
                    if (isCI) {
                        events("started", "passed", "skipped", "failed", "standard_out", "standard_error")
                    } else {
                        events("failed")
                    }
                }
            }
        }
    }

    packagingOptions {
        resources {
            excludes += 'META-INF/DEPENDENCIES'
            excludes += 'META-INF/INDEX.LIST'
        }
    }
}

dependencies {
    api(project(":commons-java"))

    coreLibraryDesugaring(libs.android.desugarJdkLibs) // required for Google Play Services https://developers.google.com/android/guides/releases#april_14_2025

    implementation(platform(libs.kotlin.bom))
    implementation(platform(libs.kotlinx.coroutines.bom))
    implementation(platform(libs.kotlinx.serialization.bom))
    implementation(libs.bundles.kotlin)
    implementation(libs.bundles.kotlin.android)
    implementation(libs.androidx.core)
    implementation(libs.androidx.sqlite)
    implementation(libs.androidx.room.common) // annotations only
    implementation(libs.bundles.workManager)
    implementation(libs.gps.basement) // update security provider for SSL
    implementation(libs.gps.time)
    implementation(libs.play.appUpdate)
    implementation(libs.protobuf.javaLite)
    // implementation(libs.protobuf.java)
    implementation(libs.bundles.retrofit)
    implementation(platform(libs.okhttp.bom))
    implementation(libs.bundles.okHttp)
    implementation(libs.bundles.gson)
    debugImplementation(libs.chucker)
    releaseImplementation(libs.chucker.noop)


    implementation(libs.bundles.youtube) {
        exclude group: "com.google.code.findbugs"
        exclude group: "org.checkerframework"
        exclude group: "com.google.errorprone"
        exclude group: "com.google.j2objc"
        exclude group: "com.google.auto.value"
        exclude group: "commons-codec"
        exclude group: "com.google.http-client", module: "google-http-client-apache-v2"
        exclude group: "org.apache.httpcomponents"
    }

    testImplementation(libs.bundles.test.unit)
}

protobuf {
    protoc {
        artifact = libs.protobuf.compiler.get()
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option("lite")
                }
            }
        }
    }
}
